#include <iostream>
#include <vector>
#include <pthread.h>
#include <cmath>
#include <cstdlib>

// Structure pour passer les données aux threads
struct ThreadData {
    std::vector<double> *data;
    std::vector<double> *gradients;
    std::vector<double> *hessians;
    int start;
    int end;
};

// Fonction pour calculer les gradients et les hessians
void* compute_gradients_hessians(void* arg) {
    ThreadData* thread_data = (ThreadData*)arg;
    std::vector<double> *data = thread_data->data;
    std::vector<double> *gradients = thread_data->gradients;
    std::vector<double> *hessians = thread_data->hessians;
    int start = thread_data->start;
    int end = thread_data->end;

    for (int i = start; i < end; ++i) {
        double prediction = (*data)[i];
        double label = 1.0; // Pour simplifier, supposons que le label est toujours 1
        double gradient = prediction - label;
        double hessian = prediction * (1 - prediction);
        (*gradients)[i] = gradient;
        (*hessians)[i] = hessian;
    }

    pthread_exit(NULL);
}

int main() {
    int num_data = 1000;
    int num_threads = 4;
    std::vector<double> data(num_data, 0.5); // Initialiser les prédictions à 0.5
    std::vector<double> gradients(num_data);
    std::vector<double> hessians(num_data);

    pthread_t threads[num_threads];
    ThreadData thread_data[num_threads];

    int chunk_size = num_data / num_threads;

    // Créer les threads
    for (int i = 0; i < num_threads; ++i) {
        thread_data[i].data = &data;
        thread_data[i].gradients = &gradients;
        thread_data[i].hessians = &hessians;
        thread_data[i].start = i * chunk_size;
        thread_data[i].end = (i == num_threads - 1) ? num_data : (i + 1) * chunk_size;
        pthread_create(&threads[i], NULL, compute_gradients_hessians, (void*)&thread_data[i]);
    }

    // Attendre que tous les threads se terminent
    for (int i = 0; i < num_threads; ++i) {
        pthread_join(threads[i], NULL);
    }

    // Afficher quelques gradients et hessians pour vérifier
    for (int i = 0; i < 10; ++i) {
        std::cout << "Gradient: " << gradients[i] << ", Hessian: " << hessians[i] << std::endl;
    }

    return 0;
}